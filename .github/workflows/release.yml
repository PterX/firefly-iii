name: 'Code - Create new release'

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release "v1.2.3" or "develop"'
        required: true
        default: 'develop'
  schedule:
    - cron: '0 3 * * MON'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, intl, zip, bcmath
      - name: Cleanup changelog
        id: cleanup-changelog
        uses: JC5/firefly-iii-dev@main
        with:
          action: 'ff3:changelog'
          output: ''
        env:
          FIREFLY_III_ROOT: /github/workspace
          GH_TOKEN: ${{ secrets.CHANGELOG_TOKEN }}
      - name: "Create THANKS.md"
        id: thank-you
        uses: JC5/firefly-iii-dev@main
        with:
          action: 'ff3:thank-you'
          output: ''
        env:
          FIREFLY_III_ROOT: /github/workspace
          GH_TOKEN: ''
      - name: Extract changelog
        id: extract-changelog
        uses: JC5/firefly-iii-dev@main
        with:
          action: 'ff3:extract-changelog'
          output: 'output'
        env:
          FIREFLY_III_ROOT: /github/workspace
          GH_TOKEN: ""
      - name: Replace version
        id: replace-version
        uses: JC5/firefly-iii-dev@main
        with:
          action: 'ff3:version'
          output: ''
        env:
          FIREFLY_III_ROOT: /github/workspace
          GH_TOKEN: ""
          FF_III_VERSION: ${{ github.event_name == 'schedule' && 'develop' || github.event.inputs.version }}
      - name: Generate JSON v1
        id: json-v1
        uses: JC5/firefly-iii-dev@main
        with:
          action: 'ff3:json-translations v1'
          output: ''
        env:
          FIREFLY_III_ROOT: /github/workspace
          GH_TOKEN: ''
      - name: Generate JSON v2
        id: json-v2
        uses: JC5/firefly-iii-dev@main
        with:
          action: 'ff3:json-translations v2'
          output: ''
        env:
          FIREFLY_III_ROOT: /github/workspace
          GH_TOKEN: ''
      - name: Code cleanup
        id: code-cleanup
        uses: JC5/firefly-iii-dev@main
        with:
          action: 'ff3:code'
          output: ''
        env:
          FIREFLY_III_ROOT: /github/workspace
          GH_TOKEN: ''
      - name: Build JS
        run: |
          npm install
          npm run prod  --workspace=v1
          npm run build --workspace=v2
          npm update
      - name: Run CI
        run: |
          rm -rf vendor composer.lock
          composer update --no-dev --no-scripts --no-plugins -q
          sudo chown -R runner:docker resources/lang
          .ci/phpcs.sh
      - name: Release
        run: |
          # do some configuration
          sudo timedatectl set-timezone Europe/Amsterdam
          git config user.name github-actions
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git config advice.addIgnoredFile false

          # set some variables
          releaseName=$version
          originalName=$version
          zipName=FireflyIII-$version.zip
          tarName=FireflyIII-$version.tar.gz

          [[ -z $(git status --untracked-files=normal --porcelain) ]] && echo "this branch is clean, no need to push..." && exit 0;
          releaseName=$version-$(date +'%Y%m%d')
          zipName=FireflyIII-develop.zip

          # in both cases, if the release or tag already exists, add ".1" until it no longer exists.
          tagFound=true
          tagCount=1
          while [ "$tagFound" = true ]
          do
            if [ $(git tag -l "$releaseName") ]; then
              echo "Tag $releaseName exists already."
              releaseName="$originalName"."$tagCount"
              echo "Tag for release is now $releaseName"
              tagCount=$((tagCount+1))
            else
             echo "Tag $releaseName does not exist, can continue"
             tagFound=false
            fi
          done
          echo "Will use tag and release name $releaseName."

          # add all content, except output.txt (this contains the changelog and/or the download instructions)
          echo 'Add all and reset output.txt'
          git add -A
          git reset output.txt
          git commit -m "Auto commit for release '$version' on $(date +'%Y-%m-%d')" || true
          git push

          # zip and tar everything
          echo 'Zip and tar...'
          zip -rq $zipName . -x "*.git*" "*.ci*" "*.github*" "*node_modules*" "*output.txt*"

          # add sha256 sum
          echo 'Sha sum ...'
          sha256sum -b $zipName > $zipName.sha256

          echo "Create default release."
          git tag -a $releaseName -m "Here be changelog"
          git push origin $releaseName

          gh release create $releaseName -F output.txt -t "$releaseName" --verify-tag
          # add zip file to release.
          gh release upload $releaseName $zipName
          rm output.txt
          rm $zipName
        env:
          GH_TOKEN: ${{ github.token }}
          version: ${{ github.event_name == 'schedule' && 'develop' || github.event.inputs.version }}
